using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


//MessageBox usw. 
using System.IO;
using System.Windows.Forms;

//Für Matlab in und Export
using MathNet.Numerics.Data.Matlab;
using MathNet.Numerics.LinearAlgebra;

//Stand jetzt für CSV export und mat import gebraucht (kann evtl später gelöscht werden)
using Accord.IO;

namespace ATIM_GUI
{
    public partial class TTA_DPA
    {
        //*****************************************************************************************************
        //                                          IMPORT
        //*****************************************************************************************************

        #region IMPORT

        /// <summary>
        /// Opens ONE file of type .mat (should be generated by Spectrum)
        /// </summary>
        private bool Binary_Read_From_matFILE()
        {
            //Commented parts were for multiSelect

            //File Dialog erstellen
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                //Settings
                openFileDialog.Filter = "mat files (*.mat)|*.mat|All files (*.*)|*.*";
                openFileDialog.FilterIndex = 1;
                openFileDialog.RestoreDirectory = true;
                /* FOR MULTISELECT
                openFileDialog.Multiselect = true;
                */

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    /* FOR MULTISELECT
                    //Alle Files abarbeiten
                    foreach (string filePath in openFileDialog.FileNames)
                    {
                    */
                        //NEW
                        string filePath = openFileDialog.FileName;

                        //Pfad und File übernhemen (wird wohl nicht gebraucht)
                        Output_File_Name = filePath.Substring(filePath.LastIndexOf('\\') + 1).Replace(".mat", "");
                        Output_File_Folder = filePath.Substring(0, filePath.LastIndexOf('\\'));

                        //Read .mat File into a stream
                        MatReader reader = new MatReader(filePath);

                        //Daten herauslösen
                        var values = reader["AI_Ch0"].GetValue<Int16[,]>();

                        //Daten in Binary_Raw_Values schreiben
                        Binary_Raw_Values = new short[values.Length];
                        Buffer.BlockCopy(values, 0, Binary_Raw_Values, 0, 2 * values.Length);

                        //Reader schließen
                        reader.Dispose();
                    /* FOR MULTISELECT
                    }
                    */
                }
            }

            return true;
        }


        #endregion IMPORT

        //*****************************************************************************************************
        //                                          EXPORT
        //*****************************************************************************************************

        #region EXPORT

        /// <summary>
        /// Saves the Binary Data as .mat File (identical to Spectrum export)
        /// </summary>
        private bool Binary_Save_As_matFILE(string fileADR)
        {
            //Check if File exists (nur wenn nicht AutoRUN)
            if (File.Exists(fileADR) && !AutoRun)
            {
                //MessageBox öffnen und auf Antwort warten
                var answer = MessageBox.Show("Do you want to overwrite file:\n" + fileADR, "Warining", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                //Wenn nein, dann abbrechen
                if (answer == DialogResult.No)
                    return false;
            }

            //File schreiben
            try
            {
                //Daten in Vektor umwandeln
                Vector<Double> v = Vector<Double>.Build.DenseOfArray(Array.ConvertAll(Binary_Raw_Values, x => (double)x));

                //Vektor in Daten umwandeln
                Matrix<Double> m = Matrix<Double>.Build.DenseOfColumnVectors(v);

                //Matlab File Schreiben
                //[Filepath, Matrix with DATA, DataName]
                MatlabWriter.Write(fileADR, m, "AI_Ch0");
            }
            catch
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Export Powersteps, Correction-Vektors as .csv
        /// </summary>
        private bool Results_Save_as_CSV()
        {
            //Powersteps
            using (var myCSV_Writer = new CsvWriter(Path.Combine(Output_File_Folder, Output_File_Name + "_PS.csv"), ';'))
            {
                //Hilfs-Array definieren
                decimal[,] helpArray = new decimal[PowerSteps_2Heat_DPA.Length, 4];

                for (int i = 0; i < PowerSteps_2Heat_DPA.Length; i++)
                {
                    helpArray[i, 0] = PowerSteps_2Heat_DPA[i];
                    helpArray[i, 1] = PowerSteps_2Sense_DPA[i];
                }

                helpArray[0, 2] = PowerStep_2Heat_STD;
                helpArray[0, 3] = PowerStep_2Sense_STD;

                //Settings ändern
                myCSV_Writer.Escape = ' ';
                myCSV_Writer.Quote = ' ';

                //Header & Daten
                myCSV_Writer.WriteHeaders(new string[] { "DPA_Heat", "DPA_Sense", "STD Heat", "STD Sense" });
                myCSV_Writer.Write<decimal>(helpArray);
            }

            //Correction-Vektors
            //Powersteps
            using (var myCSV_Writer = new CsvWriter(Path.Combine(Output_File_Folder, Output_File_Name + "_CV.csv"), ';'))
            {
                //Hilfs-Array definieren
                decimal[,] helpArray = new decimal[CorrVec_B.Length, 2];

                for (int i = 0; i < CorrVec_A.Length; i++)
                    helpArray[i, 0] = CorrVec_A[i];

                for (int i = 0; i < CorrVec_B.Length; i++)
                    helpArray[i, 1] = CorrVec_B[i];

                //Settings ändern
                myCSV_Writer.Escape = ' ';
                myCSV_Writer.Quote = ' ';

                //Header & Daten
                myCSV_Writer.WriteHeaders(new string[] { "A", "B" });
                myCSV_Writer.Write<decimal>(helpArray);
            }



            return true;
        }

        #endregion EXPROT

    }
}
